#!/usr/bin/env node

const program = require('commander');
const pkg = require('../package');
const logger = require('../lib/utils/logger');
const { readFile, writeFile } = require('../lib/utils/file');
const scan = require('../lib/scan');

const VERSION = pkg.version;
const COMMAND_NAME = 'rr';

process.argv[1] = COMMAND_NAME;
program
  .version(VERSION, '-v, --version')
  .usage('<regexp> [content] [options]')
  .option('-f --file <path>', 'Source from file path')
  .option('--stdin', 'Source from standard input')
  .option('-o --out <path>', 'Output to a file')
  .option('-r --repeated', 'Allow duplicate content')
  .option(
    '-c --conjunction <conjunction>',
    'Use to connect words, phrases, or clauses'
  )
  .action(async (regexp, content) => {
    if (process.argv.length < 3) {
      program.help();
      process.exit();
    }

    if (typeof regexp !== 'string') {
      logger.error('error: not entry regexp');
      process.exit(1);
    }

    const text = await getText(content);

    if (typeof text !== 'string') {
      logger.error(
        "error: not entry content and unused options '--stdin', '-f --file <path>'"
      );
      process.exit(1);
    }

    let getTargetMethod;
    if (program.repeated) {
      getTargetMethod = scan.getTargets;
    } else {
      getTargetMethod = scan.getNonRepeatedTargets;
    }

    const targets = getTargetMethod(text, regexp);

    program.conjunction = program.conjunction || '';
    const result = targets.join(program.conjunction);

    if (program.out) {
      writeFile(program.out, result);
    } else {
      console.log(result);
    }
  })
  .parse(process.argv);

async function getText(content) {
  let text = content;

  if (program.stdin) {
    text = await getStdin();
  } else if (program.file) {
    text = readFile(program.file);
  }

  return text;
}

function getStdin() {
  return new Promise(resolve => {
    let stdin = '';

    process.stdin.on('readable', () => {
      const chunk = process.stdin.read();
      if (chunk !== null) {
        stdin += chunk;
      }
    });
    process.stdin.on('end', () => {
      stdin = stdin
        .split('\n')
        .slice(0, -1)
        .join('\n');
      resolve(stdin);
    });
  });
}
